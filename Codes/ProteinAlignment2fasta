#The code to generate final fasta file from aligned protein sequences of busco genes to prepare genome fasta data file.
#Load packages
require(tidyverse)
require(tidyr)
library(ampir)#to read .faa files in r
library(dplyr)
library(Biostrings)
library(foreach)
# if (!requireNamespace("BiocManager", quietly=TRUE))
#  install.packages("BiocManager")
# BiocManager::install("msa")
library(msa)
getwd()
#Read protein fasta files to r downloaded from ncbi
pro100_1 <- read_faa(file="protein100_1.faa")
pro100_2 <- read_faa(file="protein100_2.faa")
pro100_3 <- read_faa(file="protein100_3.faa")
pro100_4 <- read_faa(file="protein100_4.faa")
pro100_5 <- read_faa(file="protein100_5.faa")
pro300_6 <- read_faa(file="protein300_6.faa")
pro300_7 <- read_faa(file="protein300_7.faa")
pro300_8 <- read_faa(file="protein300_8.faa")
pro300_9 <- read_faa(file="protein300_9.faa")
pro300_10 <- read_faa(file="protein300_10.faa")
pro300_11 <- read_faa(file="protein300_11.faa")
pro300_12 <- read_faa(file="protein300_12.faa")
pro222_13 <- read_faa(file="protein222_13.faa")

gene_filter <- function(protein_set){
  new <- separate(protein_set, col = seq_name , into = paste0("value",1:6),sep=" ")
  new1 <- new[,c(2,3,4,6)]
  new1 <- cbind(new1,protein_set$seq_aa)
  
  #Combine value 3 and 4 together (genus and species anme in two different columns)
  new2 <- new1 %>%
    unite(species_name, c("value3", "value4"))
  library(stringr)
  # Extract strings after "="
  new2$species_name <- str_extract(new2$species_name, "(?<==).*")
  #remove the back bracket in species column
  # Remove the symbol from dataframe values
  new2$species_name <- str_replace(new2$species_name, "]", "")
  
  #Do the same thing to remove [] in value6 column
  
  # Extract strings after "="
  new2$value6 <- str_extract(new2$value6, "(?<==).*")
  #remove the back bracket in species column
  # Remove the symbol from dataframe values
  new2$value6 <- str_replace(new2$value6, "]", "")
  
  #rename columns
  colnames(new2) <- c("gene","species_name","isoform","seq_aa")
  
  #When adding outgroup thene gene names are in uppercase. R is case sensitive. 
  #Hence, same gene name in upper and lower case act as two genes. So, lets make all in lower case
  new2$gene <- tolower(new2$gene)
  
  #eaxtract the fiest two columns and combine first two columns in to one, then we can easily remove duplicated rows
  new_Df <- new2[,c(1:2)]
  new_Df$Colnew <- apply(new_Df, 1, function(x) paste(na.omit(x), collapse = " "))
  
  #Combine the colnew to the new2 dataframe, we need the sequences as well
  new_df <- cbind(new_Df$Colnew,new2)
  names(new_df)
  
  #remove isofrom X2:4 and keep only isoform X1 sequences
  df1 <-
    new_df[!grepl("X2|X3|X4|X5|X6|X7|X8|X9", new_df$isoform),]
  #Get unique rows. we need only isoform x1
  unique_df <- df1[!duplicated(df1$`new_Df$Colnew`), ]
  
  #get a subdataframe
  gene_speciec_Df <- unique_df[,c(2,3,5)]
  
  #remove rows with gene with LOC^ (coz it's not a gene name)
  gene_speciec_Df_new <- gene_speciec_Df[!grepl('^LOC|^lg|orf|^si$|^si:',gene_speciec_Df$gene),]
  
  #divide dataframes into several dataframe using gene name
  gene <- gene_speciec_Df_new %>% group_by(gene)
  
  gene_split <- group_split(gene)
  gene_split[[8]]
  #Remove dataframes in the list that have less than 3 including 3 (just in case if these are only from three out groups)
  #177*50% (species)=89
  gene_split <- gene_split[sapply(gene_split, nrow) > 3]
  #gene_split <- gene_split[sapply(gene_split, nrow) > 89]
  return(gene_split)
  
}


# alignments100_1 <- alignments
# fastaFiles100_1 <- fastaFiles
# filenames100_1 <- filenames
# aaStringSetList100_1 <- aaStringSetList
# AlnaaStringSetList100_1 <- AlnaaStringSetList
# Alnfilenames100_1 <- Alnfilenames

protein100_1_set <- gene_filter(pro100_1)
protein100_2_set <- gene_filter(pro100_2)
protein100_3_set <- gene_filter(pro100_3)
protein100_4_set <- gene_filter(pro100_4)
protein100_5_set <- gene_filter(pro100_5)
protein300_6_set <- gene_filter(pro300_6)
protein300_7_set <- gene_filter(pro300_7)
protein300_8_set <- gene_filter(pro300_8)
protein300_9_set <- gene_filter(pro300_9)
protein300_10_set <- gene_filter(pro300_10)
protein300_11_set <- gene_filter(pro300_11)
protein300_12_set <- gene_filter(pro300_12)
protein222_13_set <- gene_filter(pro222_13)

#Read protein fasta files to r downloaded from ncbi
pro100_1 <- read_faa(file="proteinO1.faa")

# # Split strings by space
# pro100_1$split_strings <- str_split(df$strings, "\\s+")

new <- separate(pro100_1, col = seq_name , into = paste0("value",1:6),sep=" ")
new1 <- new[,c(2,3,4,6)]
new1 <- cbind(new1,pro100_1$seq_aa)

#Combine value 3 and 4 together (genus and species anme in two different columns)
new2 <- new1 %>%
  unite(species_name, c("value3", "value4"))
library(stringr)
# Extract strings after "="
new2$species_name <- str_extract(new2$species_name, "(?<==).*")
#remove the back bracket in species column
# Remove the symbol from dataframe values
new2$species_name <- str_replace(new2$species_name, "]", "")

#Do the same thing to remove [] in value6 column

# Extract strings after "="
new2$value6 <- str_extract(new2$value6, "(?<==).*")
#remove the back bracket in species column
# Remove the symbol from dataframe values
new2$value6 <- str_replace(new2$value6, "]", "")

#rename columns
colnames(new2) <- c("gene","species_name","isoform","seq")

#When adding outgroup thene gene names are in uppercase. R is case sensitive. 
#Hence, same gene name in upper and lower case act as two genes. So, lets make all in lower case
new2$gene <- tolower(new2$gene)

#eaxtract the fiest two columns and combine first two columns in to one, then we can easily remove duplicated rows
new_Df <- new2[,c(1:2)]
new_Df$Colnew <- apply(new_Df, 1, function(x) paste(na.omit(x), collapse = " "))

#Combine the colnew to the new2 dataframe, we need the sequences as well
new_df <- cbind(new_Df$Colnew,new2)
names(new_df)

#remove isofrom X2:4 and keep only isoform X1 sequences, 
df1 <-
  new_df[!grepl("X2|X3|X4|X5|X6|X7|X8|X9", new_df$isoform),]
#Get unique rows. we need only isoform x1
unique_df <- df1[!duplicated(df1$`new_Df$Colnew`), ]

#get a subdataframe
gene_speciec_Df <- unique_df[,c(2,3,5)]

#remove rows with gene with LOC^ (coz it's not a gene name)
gene_speciec_Df_new <- gene_speciec_Df[!grepl('^LOC|^lg|orf|^si$|^si:',gene_speciec_Df$gene),]

#divide dataframes into several dataframe using gene name
gene <- gene_speciec_Df_new %>% group_by(gene)

gene_split <- group_split(gene)
gene_split[[8]]
#Remove dataframes in the list that have less than 3 including 3 (just in case if these are only from three out groups)
gene_split <- gene_split[sapply(gene_split, nrow) > 3]
#protein100_2_set_new <- protein100_2_set[sapply(protein100_2_set, nrow) > 1]


#### ----------------------------------STEP2

#This step is to get individual dataframes from the list of dataframes

# Commenting this part out for now
# list2env(setNames(gene_split,paste0("newdf",seq_along(gene_split))),envir = .GlobalEnv)

# Instead we could do this
#gene_split <- protein100_2_set
# first for each df, I will concatenate gene with species name using paste for the header info foreach fasta file
gene_split <- foreach(i=1:length(gene_split)) %do% {
  gene_split[[i]] %>% mutate(header = paste0(gene_split[[i]]$gene, ";", gene_split[[i]]$species_name, sep=""))
}

# Then we can just create a new directory for the fasta files
dir <- "fastaFiles"
dir.create(dir, showWarnings = FALSE)

# Convert each dataframe to aaStringSet format
aaStringSetList <- foreach(i=1:length(gene_split)) %do% { AAStringSet(x = as.character(gene_split[[i]]$seq_aa)) }

# Name each AAStringSet
foreach(i=1:length(gene_split)) %do% { aaStringSetList[[i]]@ranges@NAMES <- as.character(gene_split[[i]]$header) }

# Create filenames for each fasta, can name by gene name
filenames <- foreach(i=1:length(gene_split)) %do% { paste0(dir, "/", gene_split[[i]]$gene[1], ".fas", sep="") }

# Then use writeXStringSet to write out each one to a fasta file in the fastaFiles directory
foreach(i=1:length(gene_split)) %do% writeXStringSet(aaStringSetList[[i]], filenames[[i]], format = "fasta")

# Then to align each one you could do (just using msa package for example)


# Grab each fasta file and import back in
fastaFiles <- foreach(i=1:length(gene_split)) %do% readAAStringSet(filenames[[i]], format = "fasta")

# Perform an msa on each file (may take a while to complete each one)
# to test it works: alignments <- foreach(i=1:2) %do% msa(fastaFiles[[i]], verbose=TRUE)
alignments <- foreach(i=1:length(gene_split)) %do% msa(fastaFiles[[i]], verbose=FALSE) # If you want to see the progress for every alignment, set to TRUE
alignments[[1]]
#alignments_100_1 <- foreach(i=1:length(gene_split)) %do% msa(fastaFiles[[i]],method =c("Muscle"),type="protein", verbose=FALSE) # If you want to see the progress for every alignment, set to TRUE
class(alignments[[1]])

# Then we can just create a new directory for the fasta files
dir <- "AlnfastaFiles"
dir.create(dir, showWarnings = FALSE)
# Convert each dataframe to aaStringSet format
AlnaaStringSetList <- foreach(i=1:length(alignments)) %do% { AAStringSet(x = as.character(alignments[[i]])) }

# Create filenames for each fasta, can name by gene name
Alnfilenames <- foreach(i=1:length(gene_split)) %do% { paste0(dir, "/", gene_split[[i]]$gene[1], ".fas", sep="") }

# Then use writeXStringSet to write out each one to a fasta file in the fastaFiles directory
foreach(i=1:length(alignments)) %do% writeXStringSet(AlnaaStringSetList[[i]], Alnfilenames[[i]], format = "fasta")
# Then use writeXStringSet to write out each one to a fasta file in the fastaFiles directory
#foreach(i=1:length(alignments)) %do% writeXStringSet(alignments[[i]], Alnfilenames[[i]], format = "fasta")

#Rename as I have 13 large files,
alignments100_1 <- alignments
fastaFiles100_1 <- fastaFiles
filenames100_1 <- filenames
aaStringSetList100_1 <- aaStringSetList
AlnaaStringSetList100_1 <- AlnaaStringSetList
Alnfilenames100_1 <- Alnfilenames
gene_split <- protein100_2_set

getwd()
#Function for msa
MSA_genes <- function(gene_split){
  #This step is to get individual dataframes from the list of dataframes
  
  # Commenting this part out for now
  # list2env(setNames(gene_split,paste0("newdf",seq_along(gene_split))),envir = .GlobalEnv)
  
  # Instead we could do this
  
  # first for each df, I will concatenate gene with species name using paste for the header info foreach fasta file
  gene_split <- foreach(i=1:length(gene_split)) %do% {
    gene_split[[i]] %>% mutate(header = paste0(gene_split[[i]]$gene, ";", gene_split[[i]]$species_name, sep=""))
  }
  
  # Then we can just create a new directory for the fasta files
  dir <- "fastaFiles"
  dir.create(dir, showWarnings = FALSE)
  
  # Convert each dataframe to aaStringSet format
  aaStringSetList <- foreach(i=1:length(gene_split)) %do% { AAStringSet(x = as.character(gene_split[[i]]$seq_aa)) }
  
  # Name each AAStringSet
  foreach(i=1:length(gene_split)) %do% { aaStringSetList[[i]]@ranges@NAMES <- as.character(gene_split[[i]]$header) }
  
  # Create filenames for each fasta, can name by gene name
  filenames <- foreach(i=1:length(gene_split)) %do% { paste0(dir, "/", gene_split[[i]]$gene[1], ".fas", sep="") }
  
  # Then use writeXStringSet to write out each one to a fasta file in the fastaFiles directory
  foreach(i=1:length(gene_split)) %do% writeXStringSet(aaStringSetList[[i]], filenames[[i]], format = "fasta")
  
  # Then to align each one you could do (just using msa package for example)
  
  
  # Grab each fasta file and import back in
  fastaFiles <- foreach(i=1:length(gene_split)) %do% readAAStringSet(filenames[[i]], format = "fasta")
  
  # Perform an msa on each file (may take a while to complete each one)
  # to test it works: alignments <- foreach(i=1:2) %do% msa(fastaFiles[[i]], verbose=TRUE)
  alignments <- foreach(i=1:length(gene_split)) %do% msa(fastaFiles[[i]], verbose=FALSE) # If you want to see the progress for every alignment, set to TRUE
  alignments[[1]]
  #alignments_100_1 <- foreach(i=1:length(gene_split)) %do% msa(fastaFiles[[i]],method =c("Muscle"),type="protein", verbose=FALSE) # If you want to see the progress for every alignment, set to TRUE
  class(alignments[[1]])
  
  # Then we can just create a new directory for the fasta files
  dir <- "AlnfastaFiles"
  dir.create(dir, showWarnings = FALSE)
  # Convert each dataframe to aaStringSet format
  AlnaaStringSetList <- foreach(i=1:length(alignments)) %do% { AAStringSet(x = as.character(alignments[[i]])) }
  
  # Create filenames for each fasta, can name by gene name
  Alnfilenames <- foreach(i=1:length(gene_split)) %do% { paste0(dir, "/", gene_split[[i]]$gene[1], ".fas", sep="") }
  
  # Then use writeXStringSet to write out each one to a fasta file in the fastaFiles directory
  foreach(i=1:length(alignments)) %do% writeXStringSet(AlnaaStringSetList[[i]], Alnfilenames[[i]], format = "fasta")
  
  
}
MSA_genes(protein100_1_set)
MSA_genes(protein100_2_set)
MSA_genes(protein100_3_set)
MSA_genes(protein100_4_set)
MSA_genes(protein100_5_set) 
MSA_genes(protein300_6_set) 
getwd()
MSA_genes(protein300_7_set)
MSA_genes(protein300_8_set)
MSA_genes(protein300_9_set) 
MSA_genes(protein300_10_set)
MSA_genes(protein300_11_set)
MSA_genes(protein300_12_set)
MSA_genes(protein222_13_set)
#--------------------------
library(seqinr)
#Now we need to concatanate all the genes together
#First read all the fas fies into r
#first <- read_faa("abhd14a.fas")
#including 3 out groups (Gallus_gallus, Homo_sapiens,Callorhinchus milii) in file "AlnfastaFiles_OutG"
files <- list.files(path="C:/Genome_GenBank_new/AlnfastaFiles_Final",pattern="*.fas",full.names=T,recursive=F)
fastaList <- foreach(i=1:length(files))%do%read_faa(files[i])
first <- fastaList[[1]]
#Convert to a list of dataframes

fastaList_new <- foreach(i=1:length(fastaList))%do%as.data.frame(fastaList[[i]])

library(tidyverse)
#split the column seq_name using ';' as the separator in to gene and species names.Since, all the dataframes have the same column use lapply,
fastaList_species_names <- lapply(fastaList_new, tidyr::separate, col = "seq_name", into = c("gene", "species_name"), sep = ";")
names(fastaList_species_names[[1]])#"gene" "species_name" "seq_aa" 
check <- fastaList_species_names[[2]]
class(fastaList_species_names)
#Since we need the species and aa sequences we get the 2nd and 3rd column 
fastaList_species_names_new <- lapply(fastaList_species_names , FUN = function(x){x[, c(2:3)]})
names(fastaList_species_names_new[[1]])
#Horizontally concatanate the multiple dataframes into a one dataframe using species_name column
big_df <- Reduce(function(x, y) merge(x, y, by = "species_name", all = TRUE), fastaList_species_names_new)
#warnings(big_df)

#remove species with low quality alignment score (species with less number of species)
#Remove these will give the 177 organisms that have genome data we needed
#Species have to remove
rows_to_remove <- c("Oncorhynchus_keta", "Oncorhynchus_nerka","Oncorhynchus_tshawytscha","Oncorhynchus_gorbuscha","Oncorhynchus_mykiss","Salmo_salar","Carassius_carassius","Carassius_auratus","Salvelinus_fontinalis","Salvelinus_namaycush","Sinocyclocheilus_grahami","Sinocyclocheilus_rhinocerous")

# Remove the rows specified in rows_to_remove
genome_df <- big_df[!big_df$species_name %in% rows_to_remove, ]
#get the gene names
#Since we need the gene column we get the 1st column of fastaList_species_names dataframe
gene_names <- lapply(fastaList_species_names , FUN = function(x){x[,1]})

# Using lapply to extract the first element from each data frame in the list
first_elements <- lapply(gene_names, function(x) x[[1]])
#get the list elements as a vector
vector_elements <- unlist(first_elements)
#rename gene names in the dataframe "genome_df" using the vector_elements vector

colnames(genome_df)[2:2541] <- vector_elements

# Function to replace NA values with dashes based on other rows
replace_na_with_dashes <- function(x) {
  non_na_values <- x[!is.na(x)]
  if (length(non_na_values) > 0) {
    dashes <- paste(rep("-", nchar(non_na_values[1])), collapse = "")
    x[is.na(x)] <- dashes
  }
  return(x)
}

# Apply the function to selected columns in the dataframe
cols_to_process <- vector_elements
genome_df[cols_to_process] <- lapply(genome_df[cols_to_process], function(x) replace_na_with_dashes(x))

#Remove the genes with low quality alignment scores
#Read tsv file
genomeTSV <- read.table("Genes_to_keep_Mar25.tsv", header = TRUE, sep = "\t")
#Since, I need the genes I filter out the GeneName column as a vector
GeneNameVec <- as.vector(genomeTSV$GeneName)
#Intersect of gene_names (genes_to_keep list and genes with more than 50% species (89 species))
genes_intersect <- intersect(vector_elements, GeneNameVec)
#genes_diff <- data.frame(setdiff(GeneNameVec,vector_elements))
#keep columns with these genes (2011 genes) from the genome_df
names(genome_df)[1]
NewGenome_df <- genome_df[,c("species_name",genes_intersect)]
#Extra step-----
#I copy this dataframe to performe an extra step. Just to keep a count of genes in each species I need to know what genes (1946) finally here
NewGenome_dfTest <- NewGenome_df
names(NewGenome_dfTest)
# Get all column names of the dataframe
col_names <- colnames(NewGenome_dfTest)

# Remove the first column name
col_names_without_first <- col_names[-1]
# NewGenome_dfTestVec <- data.frame(NewGenome_dfTest)
# NewGenome_dfTestVec <- NewGenome_dfTestVec[-1,]
# Filter the dataframe using base R
filtered_genomeTSV <- genomeTSV[genomeTSV$GeneName %in% col_names_without_first, ]
#Keep this as a csv file to submit as a supplementary material
# Save the vector as a CSV file
write.csv(filtered_genomeTSV, file = "Genome1946genesdetails.csv", row.names = FALSE, quote = FALSE)

getwd()
#Extra step ends here-----
#Merge all genes togetehr to have as a genome/multi gene sequence
NewGenome_dfSep <- NewGenome_df %>% 
  unite("Merged","42sp43":"zwilch",sep="")
#check the 1st row of genome_df_new df,
NewGenome_dfSep[1,]
#Check the number of characters
sapply(NewGenome_dfSep,nchar)#1667262 #1667249
library(ampir)
#df_to_faa(NewGenome_dfSep, file = "genome1946.fasta")
df_to_faa(NewGenome_dfSep, file = "genome1946New.fasta")
#Extra step to find number of bases----------
names(NewGenome_dfSep)
NewGenome_dfSepExtra <- NewGenome_dfSep
# Remove underscores and calculate the length of the merged column (number of bases)
NewGenome_dfSepExtra$base_count <- nchar(gsub("-", "", NewGenome_dfSepExtra$Merged))
# # Calculate the length of the merged column (number of bases)
# NewGenome_dfSepExtra$base_count <- nchar(NewGenome_dfSepExtra$Merged)

# Find max, min, and average of base counts
max_bases <- max(NewGenome_dfSepExtra$base_count)#1187957
min_bases <- min(NewGenome_dfSepExtra$base_count)#351019
avg_bases <- mean(NewGenome_dfSepExtra$base_count)#1113936

#Extrastep ends here-----
#--OutGroup

#OutGroups for Actinopterygii
#Read Outgroup protein fasta files to r, downloaded from ncbi
Opro100_1 <- read_faa(file="proteinO1.faa")
Opro100_2 <- read_faa(file="proteinO2.faa")
Opro100_3 <- read_faa(file="proteinO3.faa")
Opro100_4 <- read_faa(file="proteinO4.faa")
Opro100_5 <- read_faa(file="proteinO5.faa")
Opro300_6 <- read_faa(file="proteinO6.faa")
Opro300_7 <- read_faa(file="proteinO7.faa")
Opro300_8 <- read_faa(file="proteinO8.faa")
Opro300_9 <- read_faa(file="proteinO9.faa")
Opro300_10 <- read_faa(file="proteinO10.faa")
Opro300_11 <- read_faa(file="proteinO11.faa")
Opro300_12 <- read_faa(file="proteinO12.faa")
Opro222_13 <- read_faa(file="proteinO13.faa")

# Listing all the data frames
list_of_dataframes <- list(pro100_1,pro100_2,pro100_3,pro100_4,pro100_5,pro300_6,pro300_7,pro300_8,pro300_9,pro300_10,pro300_11,pro300_12,pro222_13,Opro100_1,Opro100_2,Opro100_3,Opro100_4,Opro100_5,Opro300_6,Opro300_7,Opro300_8,Opro300_9,Opro300_10,Opro300_11,Opro300_12,Opro222_13)

# Combine all data frames using do.call and rbind
combined_df <- do.call(rbind, list_of_dataframes)

#Use gene_filter function
proteinFull_set <- gene_filter(combined_df)#including outgroups
#proteinFull_set[[463]]

#Use MSA_genes function
MSA_genes(proteinFull_set)
